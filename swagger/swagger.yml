swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /gestor_documental/:
    post:
      tags:
      - gestor_documental
      description: |-
        Crear documento en Nuxeo
        <br>
      operationId: GestorDocumentalController.PostGestorDocumental
      parameters:
      - in: body
        name: body
        description: Crear documento en Nuxeo
        required: true
        schema:
          $ref: '#/definitions/{}'
      responses:
        "200":
          description: '{}'
        "403":
          description: body is empty
  /gestor_documental/{enlace}:
    get:
      tags:
      - gestor_documental
      description: |-
        obtener documento por enlace
        <br>
      operationId: GestorDocumentalController.GetGestorDocumental
      parameters:
      - in: path
        name: enlace
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: '{}'
        "403":
          description: :enlace is empty
  /gestor_documental/{url}:
    put:
      tags:
      - gestor_documental
      description: |-
        Crear documento en Nuxeo
        <br>
      operationId: GestorDocumentalController.PostGestorDocumental
      parameters:
      - in: body
        name: body
        description: Crear documento en Nuxeo
        required: true
        schema:
          $ref: '#/definitions/{}'
      responses:
        "200":
          description: '{}'
        "403":
          description: body is empty
  /novedad/:
    get:
      tags:
      - novedad
      description: |-
        get Novedades
        <br>
      operationId: NovedadesController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Novedades'
        "403":
          description: ""
    post:
      tags:
      - novedad
      description: |-
        create Novedades
        <br>
      operationId: NovedadesController.Create
      parameters:
      - in: body
        name: body
        description: body for Novedades content
        required: true
        schema:
          $ref: '#/definitions/models.Novedades'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Novedades'
        "403":
          description: body is empty
  /novedad/{id}:
    delete:
      tags:
      - novedad
      description: |-
        delete the Novedades
        <br>
      operationId: NovedadesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /novedad/{id}/{vigencia}:
    get:
      tags:
      - novedad
      description: |-
        get Novedades by id
        <br>
      operationId: NovedadesController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Novedades'
        "403":
          description: :id is empty
    put:
      tags:
      - novedad
      description: |-
        update the Novedades
        <br>
      operationId: NovedadesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Novedades content
        required: true
        schema:
          $ref: '#/definitions/models.Novedades'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Novedades'
        "403":
          description: :id is not int
  /object/:
    get:
      tags:
      - object
      description: |-
        get all objects
        <br>
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: |-
        create object
        <br>
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: |-
        find object by objectid
        <br>
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: |-
        update the object
        <br>
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: |-
        delete the object
        <br>
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /registro_novedad/:
    post:
      tags:
      - registro_novedad
      description: |-
        Agregar RegistroNovedad
        <br>
      operationId: RegistroNovedadController.PostRegistroNovedad
      parameters:
      - in: body
        name: body
        description: body Agregar RegistroNovedad content
        required: true
        schema:
          $ref: '#/definitions/{}'
      responses:
        "200":
          description: '{}'
        "403":
          description: body is empty
  /replica/:
    get:
      tags:
      - replica
      description: |-
        get Replica
        <br>
      operationId: ReplicaController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Replica'
        "403":
          description: ""
    post:
      tags:
      - replica
      description: |-
        create Replica
        <br>
      operationId: ReplicaController.Create
      parameters:
      - in: body
        name: body
        description: body for Replica content
        required: true
        schema:
          $ref: '#/definitions/models.Replica'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Replica'
        "403":
          description: body is empty
  /replica/{id}:
    get:
      tags:
      - replica
      description: |-
        get Replica by id
        <br>
      operationId: ReplicaController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Replica'
        "403":
          description: :id is empty
    put:
      tags:
      - replica
      description: |-
        update the Replica
        <br>
      operationId: ReplicaController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Replica content
        required: true
        schema:
          $ref: '#/definitions/models.Replica'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Replica'
        "403":
          description: :id is not int
    delete:
      tags:
      - replica
      description: |-
        delete the Replica
        <br>
      operationId: ReplicaController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user/:
    get:
      tags:
      - user
      description: |-
        get all Users
        <br>
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: |-
        create users
        <br>
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: |-
        get user by uid
        <br>
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: |-
        update the user
        <br>
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: |-
        Logs user into the system
        <br>
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /validarCambioEstado/:
    post:
      tags:
      - validarCambioEstado
      description: |-
        create ValidarCambiosEstado
        <br>
      operationId: CambioEstadoContratoValidoController.ValidarCambiosEstado
      parameters:
      - in: body
        name: body
        description: Crear documento en Nuxeo
        required: true
        schema:
          $ref: '#/definitions/{}'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Alert'
        "400":
          description: body is empty
definitions:
  '{}':
    title: '{}'
    type: object
  models.Alert:
    title: Alert
    type: object
    properties:
      Body:
        $ref: '#/definitions/models.interface'
      Code:
        type: string
      Type:
        type: string
  models.Novedades:
    title: Novedades
    type: object
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.Replica:
    title: Replica
    type: object
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
  models.interface:
    title: interface
    type: object
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: validarCambioEstado
  description: |
    CambioEstadoContratoValidoController operations for CambioEstadoContratoValido
- name: registro_novedad
  description: |
    RegistroNovedadController operations for RegistroNovedad
- name: novedad
  description: |
    NovedadesController operations for Novedades
- name: replica
  description: |
    ReplicaController operations for Replica
- name: gestor_documental
  description: |
    GestorDocumentalController operations for Nuxeo
